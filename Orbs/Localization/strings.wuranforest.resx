<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="eyePickup" xml:space="preserve">
    <value>${§Three eyes? Why does this spider have only three?}</value>
  </data>
  <data name="level01_AngusNeutral" xml:space="preserve">
    <value>Who are you? What do you want?
Meh... I don't care. Go away or I will cut you!</value>
  </data>
  <data name="level01_AngusTriggered" xml:space="preserve">
    <value>Where do you have this from? Where is Fosco?
That's it! You are going to die now!</value>
  </data>
  <data name="level01_BushNote_01" xml:space="preserve">
    <value>Hey Fosco,
I got rid of the others. Now we can share the money fifty - fifty.
And I have found some strange glowing sphere.
Hurry up, meet me at the camp in the south.
-Angus

${§I am not Fosco, but what does it matter.
Maybe I can trick Angus somehow?
And what sphere is he talking about?}</value>
  </data>
  <data name="level01_Guard_01" xml:space="preserve">
    <value>Guard Nisol,
I already told you that you can enter the town.
Just go.</value>
  </data>
  <data name="level01_Guard_02" xml:space="preserve">
    <value>Guard Nisol,
Hm, some extra money would be nice.
Maybe you are not that bad.
You now can enter the town, but behave!</value>
  </data>
  <data name="level01_Guard_03" xml:space="preserve">
    <value>Guard Nisol,
Weird people are wandering around. Strangers are not allowed 
to enter the town any more.
Sorry, move along.</value>
  </data>
  <data name="level01_Jar_01" xml:space="preserve">
    <value>You already have a jar.
One is enough.</value>
  </data>
  <data name="level01_Jar_02" xml:space="preserve">
    <value>You have picked up an emtpy jar.</value>
  </data>
  <data name="level01_Jar_03" xml:space="preserve">
    <value>Your jar is already full.</value>
  </data>
  <data name="level01_Jar_04" xml:space="preserve">
    <value>You have filled your emtpy jar with water.</value>
  </data>
  <data name="level01_Jar_05" xml:space="preserve">
    <value>You have no container for the water.</value>
  </data>
  <data name="level01_Jar_06" xml:space="preserve">
    <value>You do not need another jar.</value>
  </data>
  <data name="level01_Note_01" xml:space="preserve">
    <value>Hello fellows,
Good that you have found the stone, told you It will work.
I have found a way to get inside the town.
We must keep this to our self!
The guard at the entrance can be bought.
Your cut of the last robbery is hidden nearby.
That should be enough to get inside.
Two arrows under a light will show you the way.
See you soon
-Angus</value>
  </data>
  <data name="level01_RedBush_01" xml:space="preserve">
    <value>${§A red bush.
Nothing to do here I think.}</value>
  </data>
  <data name="level01_RedBush_02" xml:space="preserve">
    <value>Right next to the water, but still looks dry.</value>
  </data>
  <data name="level01_SignPost01_01" xml:space="preserve">
    <value>This path leads to Hollowrock.
${§I probably should go there.}</value>
  </data>
  <data name="level01_SignPost01_02" xml:space="preserve">
    <value>Red, round and bushy, I am sitting by the water.
Make me wet and I may give you a quarter.

${§How to make something wet?
Wasn't there a bunch of blue jars
by the well a bit north of the road?}</value>
  </data>
  <data name="level01_SignPostCave" xml:space="preserve">
    <value>${§This leads to some dark cave.
Smells quite bad.
Better not go inside.}</value>
  </data>
  <data name="level01_SignPostField" xml:space="preserve">
    <value>Grendelins' field!
Keep out!

${§Because of all the vegetables?
Doubtfull.}</value>
  </data>
  <data name="level01_SignPostLake" xml:space="preserve">
    <value>'Hollowrock Pond'

${§Definetly too cold for a bath.}</value>
  </data>
  <data name="level01_StoneTablet" xml:space="preserve">
    <value>${§I have found a strange stone tablet.
There are letters encraved. They say:
LL-WA-FA-TER
What does that mean?}</value>
  </data>
  <data name="level01_Story_01" xml:space="preserve">
    <value>So, this is where it starts. In the summer of 262 o.U.

It was about time to leave Urgads house an stand on my own feet.

Toria is a big country, I am curios what challanges await me.

Allthough... The Wuran Forest is famous for it's ... boredom...

Maybe I should head east to Hollowrock.



Hint:
Many objects in the world are interactable. Click them.</value>
  </data>
  <data name="orbPickUp" xml:space="preserve">
    <value>${§Angus had this orb with him.
What am I supposed to do with it?
Maybe someone in Hollowrock knows.}</value>
  </data>
</root>